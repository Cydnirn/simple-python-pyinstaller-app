node{
    withDockerContainer(image: 'python:2-alpine'){
        stage("Build"){
            sh 'python -m py_compile sources/add2vals.py sources/calc.py'
            stash(name: 'compiled-results', includes: 'sources/*.py*')
        }
    }
    withDockerContainer(image: 'qnib/pytest'){
        try{
            stage("Test"){
                sh 'py.test --verbose --junit-xml test-reports/results.xml sources/test_calc.py'
            }
        } catch (e){
            sh "exit 1"
        } finally {
            junit 'test-reports/results.xml'
        }
    }
    def workspace = pwd()
    withEnv(["VOL=$workspace/sources:/src", "IMAGE=cdrx/pyinstaller-linux:python2"]){
        try{
            input(message: 'Lanjutkan ke tahap Deploy?', ok: 'Proceed')
            stage("Deploy"){
                dir(path: env.BUILD_ID){
                    unstash(name: 'compiled-results')
                    sh "ls"
                    sh "docker run --rm -v $VOL $IMAGE 'pyinstaller -F add2vals.py'"
                }
            }
            archiveArtifacts("sources/dist/add2vals")
            sh "docker run --rm -v $VOL} $IMAGE 'rm -rf build dist'"
        } catch(e){
            println "Failed because of $e"
        }
    }
     withAWS(region: 'ap-southeast-1', credentials: 'AWSCodeDeploy', role:"CodeDeployRole", roleAccount:"440941313939", duration:1200, roleSessionName: 'Jenkins-CodeDeploy'){
        try{
            zip zipFile: 'add2vals.zip', archive: false, dir: "/"
            s3Upload(file: 'sources/dist/add2vals', bucket: 'dicoding-cyd-cicd-submission', path: 'artifacts/add2vals.zip')
            createDeployment(
                s3Bucket: "dicoding-cyd-cicd-submission",
                s3Key: "artifacts/add2vals.zip",
                s3BundleType: "zip",
                applicationName: "dicoding-cicd-app",
                deploymentGroupName: "dicoding-deployment-g",
                deploymentConfigName: "CodeDeployDefault.OneAtATime",
                description: "Test deploy",
                waitForCompletion: "true",
            )
        }catch(e){
            println "Failed because of $e"
        } finally {
            sleep(60)
        }
    }
}